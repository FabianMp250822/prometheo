
rules_version = '2';

// Helper function to check for an admin role
function isAdmin(request) {
  return request.auth.token.role == 'Administrador';
}

// Helper function to check for an accountant role
function isContador(request) {
  return request.auth.token.role == 'Contador';
}

// Helper function to check for either lawyer role
function isAbogado(request) {
  return request.auth.token.role == 'Abogado Titular' || request.auth.token.role == 'Abogado Externo';
}

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Secure the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read their own profile
      allow read: if request.auth.uid == userId;
      
      // Admins can read or write any user profile
      allow get, list, write: if isAdmin(request);

      // Abogados can only read their own profile
      allow get: if isAbogado(request) && request.auth.uid == userId;
      
      // Allow creation for authenticated users (handled by Cloud Function)
      allow create: if request.auth.uid != null;
    }

    match /users/{userId}/sessionLogs/{logId} {
        // Only the user themselves can create their own session logs
        allow create: if request.auth.uid == userId;
        // Only admins can read session logs for audit purposes
        allow read, list: if isAdmin(request);
    }
    
    // Secure the 'pensionados' collection
    match /pensionados/{pensionadoId} {
      // Admins and Accountants can read the full list or individual documents
      allow get, list: if isAdmin(request) || isContador(request);

      // Abogados can only read a pensioner document if it's in their assigned list
      allow get: if isAbogado(request) && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.associatedPensioners.hasAny([pensionadoId]);
      
      // Prevent any direct writes to the pensionados collection from the client
      allow write: if false; 
    }
    
    // Secure the payments subcollection
    match /pensionados/{pensionadoId}/pagos/{pagoId} {
      // Allow read access under the same conditions as the parent pensioner document
      allow read: if isAdmin(request) || isContador(request) || 
                    (isAbogado(request) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.associatedPensioners.hasAny([pensionadoId]));
      allow write: if false; // No direct client writes
    }

    // Secure the 'nuevosclientes' collection
    match /nuevosclientes/{clienteId} {
        // Admins and Accountants can read and list clients
        allow get, list: if isAdmin(request) || isContador(request);
        // Only admins or the backend can write/update client data
        allow write: if isAdmin(request);
        // Abogados can only read clients assigned to them
        allow get: if isAbogado(request) && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.associatedPensioners.hasAny([clienteId]);
    }

    match /nuevosclientes/{clienteId}/pagos/{pagoId} {
        allow read: if isAdmin(request) || isContador(request);
        allow write: if isAdmin(request);
    }

    match /nuevosclientes/{clienteId}/documentos/{docId} {
        allow read: if isAdmin(request) || isContador(request);
        allow write: if isAdmin(request);
    }

    // Secure other collections
    match /{document=**} {
      // Default deny all reads and writes unless specified above
      allow read, write: if isAdmin(request);
    }
    
     match /procesoscancelados/{procesoId} {
        allow read: if isAdmin(request) || isContador(request);
        // Prevent client-side writes
        allow write: if false;
    }

    match /provired_notifications/{notificationId} {
        // Only admins can read general notifications
        allow read: if isAdmin(request);
        // Prevent any client-side writes
        allow write: if false;
    }

    match /procesos/{procesoId}/{subcollection}/{documentId} {
        allow read: if isAdmin(request) || isContador(request) ||
                    (isAbogado(request) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.associatedPensioners.hasAny([procesoId]));
        allow write: if isAdmin(request);
    }
  }
}
